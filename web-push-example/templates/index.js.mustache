// using a global variable to store subscribtion information
window.PushSubscription = undefined;
window.applicationServerKey = new Uint8Array({{serverKey}});

function waitForActiveServiceWorker(serviceWorkerRegistration) {
    return new Promise((resolve, reject) => {
        if(serviceWorkerRegistration.installing){
            console.log("Service worker installing");
            serviceWorkerRegistration.installing.addEventListener('statechange', function(e) {
                if (e.target.state == 'activated') {
                    console.log("Service worker activated");
                    resolve(serviceWorkerRegistration);
                }
            });
        } else if(serviceWorkerRegistration.waiting){
            console.log("Service worker waiting");
            resolve(serviceWorkerRegistration);
        } else if(serviceWorkerRegistration.active){
            console.log("Service worker active");
            resolve(serviceWorkerRegistration);
        }
    });
}

function subscribeServiceWorker(serviceWorkerRegistration) {
    console.log(serviceWorkerRegistration);
    if(serviceWorkerRegistration.installing){
        console.log("Service worker installing");
    } else if(serviceWorkerRegistration.waiting){
        console.log("Service worker waiting");
    } else if(serviceWorkerRegistration.active){
        console.log("Service worker active");
    }

    serviceWorkerRegistration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: window.applicationServerKey,
    })
    .then(function(subscription) {
        window.PushSubscription = subscription;
        console.log("Subscribed to push notifications.")
        subscribePushNotification();
    })
    .catch(function(e) {
        console.error("Push notifications disabled on this browser.", e);
    })
}

// function to subscribe to push notification
function pushNotificationSubscribe(serviceWorkerRegistration) {
    if(!("Notification" in window)){
        console.log("Push notifications not supported");
    } else if (Notification.permission === "granted") {
        serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: window.applicationServerKey,
        })
        .then(function(subscription) {
            window.PushSubscription = subscription;
            console.log("Subscribed to push notifications.")
        })
        .catch(function(e) {
            console.error("Push notifications disabled on this browser.", e);
        })
    } else if (Notification.permission !== "denied") {

        Notification.requestPermission().then((permission) => {
            if (permission === "granted") {
                serviceWorkerRegistration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: window.applicationServerKey,
                })
                .then(function(subscription) {
                    window.PushSubscription = subscription;
                    console.log("Subscribed to push notifications.")
                })
                .catch(function(e) {
                    console.error("Push notifications disabled on this browser.", e);
                })
            } else {
                console.log("Push notifications blocked. Please allow notifications from browser settings to use this option.");
            }
          });
    }

};

// Request push notification permissions or return the current permission if they already exist
function requestPushNotificationPermission() {
    if (Notification.permission === "granted") {
        // Permissions are already granted
        console.log("Push notifications already enabled.");
        return Promise.resolve(Notification.permission);
    } else if (Notification.permission !== "denied") {
        // Premissions have not been requested yet
        return Notification.requestPermission();
    }
    return Promise.reject();
}

function registerServiceWorker() {
    console.log("Registering service worker");
    return navigator.serviceWorker.register('http://localhost:3000/service-worker.js');
}

function handleServiceWorkerRegistration(serviceWorkerRegistration) {
    console.log("Service worker registered")
    return serviceWorkerRegistration.pushManager.getSubscription()
        .then(function(subscription) {
            // Check for an existing subscription
            if (!subscription) {
                // Try subscribing to push notifications if a subscription does not exist
                console.log("pushNotificationSubscribe")
                serviceWorkerSubscribe(serviceWorkerRegistration);
            } else {
                console.log("Already subscribed to push notifications.")
                if(!equalArrayBuffers(subscription.options.applicationServerKey, window.applicationServerKey.buffer) )
                {
                    // If VAPID keys have changed since last subscription then re-subscribe
                    // TODO can this be done in the service worker?
                    console.log("But the VAPID keys have changed since previous subscription, so unsubscribing and subscribing again.");
                    pushNotificationUnsubscribe(subscription)
                        .then( () => serviceWorkerSubscribe(serviceWorkerRegistration) )
                        .catch( () => serviceWorkerSubscribe(serviceWorkerRegistration) );
                } else {
                    window.PushSubscription = subscription;
                }
            }
        })
        .catch(function(err) {
            pushNotificationSubscribe();
        });
} 

function serviceWorkerSubscribe(serviceWorkerRegistration) {
    return serviceWorkerRegistration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: window.applicationServerKey,
    }).then(function(subscription) {
        window.PushSubscription = subscription;
        console.log("Subscribed to push notifications.")
    }).catch(function(e) {
        console.error("Push notifications disabled on this browser.", e);
    });
}

// function to unsubscribe from push notification
// TODO this should inform the server that the user has unsubscribed
function pushNotificationUnsubscribe( pushSubscription ) {
    return new Promise((resolve, reject) => {
        pushSubscription.unsubscribe()
        .then(function(successful) {
            console.log("Unsubscribed from push notifications.");
            window.PushSubscription = undefined;
            resolve();
        })
        .catch(function(e) {
            console.error("Push notifications disabled on this browser.", e);
            reject();
        });
    });
};

// function to send a push notification
function sendPushNotification(text){
    $.ajax({ url: 'http://localhost:3000/send',
                type:'POST',
                data: { text: text },
                dataType: 'json',
                success: function(response){
                    console.log(response);
                },
                error: function(jqxhr) {
                    console.error(jqxhr);
                }
    });
}

function subscribePushNotification() {
    console.log("Sending push subscription to server");
    if (window.PushSubscription) {
        $.ajax({ url: 'http://localhost:3000/subscribe',
                 type:'POST',
                 data: {
                     endpoint: window.PushSubscription.endpoint,
                     auth: window.PushSubscription.toJSON().keys.auth,
                     p256dh: window.PushSubscription.toJSON().keys.p256dh,
                 },
                 dataType: 'json',
                 success: function(response){
                     console.log(response);
                 },
                 error: function(jqxhr) {
                     console.error(jqxhr);
                 }
        });
    } else {
        console.error("No push notification subscription found.");
    }
}


function equalArrayBuffers(b1, b2){
    if (b1.byteLength != b2.byteLength) return false;
    var a1 = new Uint8Array(b1);
    var a2 = new Uint8Array(b2);
    for (var i = 0 ; i < b1.byteLength ; i++)
    {
        if (a1[i] != a2[i]) return false;
    }
    return true;
}

function whenGranted(permission) {
    if (permission === "granted") {
        console.log("Push notifications enabled");
        return Promise.resolve();
    }
    return Promise.reject();
}

// Go through the steps of requesting permission, subscribing to push notifications
function newPushNotificationInitialize() {
    // Check for notifications support
    if (!('Notification' in window)) {
        console.error("Push notifications are not supported on this browser.");
        return;
    }
    // Check for service worker support
    if (!('serviceWorker' in navigator)) {
        console.error("Service workers are not supported on this browser.");
        return;
    }
    // Get the state of the current permissions or request them if they have not been requested before
    requestPushNotificationPermission()
        .then(whenGranted)
        .then(registerServiceWorker)
        .then(waitForActiveServiceWorker)
        .then(subscribeServiceWorker);
}
