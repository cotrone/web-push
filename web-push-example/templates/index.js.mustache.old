// using a global variable to store subscribtion information
window.PushSubscription = undefined;
window.applicationServerKey = new Uint8Array({{applicationServerKey}});

function subscribeServiceWorker(serviceWorkerRegistration) {
    serviceWorkerRegistration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: window.applicationServerKey,
    })
    .then(function(subscription) {
        window.PushSubscription = subscription;
        console.log("Subscribed to push notifications.")
    })
    .catch(function(e) {
        console.error("Push notifications disabled on this browser.");
    })
}

// function to subscribe to push notification
function pushNotificationSubscribe(serviceWorkerRegistration) {
    if(!("Notification" in window)){
        console.log("Push notifications not supported");
    } else if (Notification.permission === "granted") {
        serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: window.applicationServerKey,
        })
        .then(function(subscription) {
            window.PushSubscription = subscription;
            console.log("Subscribed to push notifications.")
        })
        .catch(function(e) {
            console.error("Push notifications disabled on this browser.");
        })
    } else if (Notification.permission !== "denied") {

        Notification.requestPermission().then((permission) => {
            if (permission === "granted") {
                serviceWorkerRegistration.pushManager.subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: window.applicationServerKey,
                })
                .then(function(subscription) {
                    window.PushSubscription = subscription;
                    console.log("Subscribed to push notifications.")
                })
                .catch(function(e) {
                    console.error("Push notifications disabled on this browser.");
                })
            } else {
                console.log("Push notifications blocked. Please allow notifications from browser settings to use this option.");
            }
          });
    }

};

// Request push notification permissions or return the current permission if they already exist
function requestPushNotificationPermission() {
    if (Notification.permission === "granted") {
        // Permissions are already granted
        console.log("Push notifications already enabled.");
        return Promise.resolve(Notification.permission);
    } else if (Notification.permission !== "denied") {
        // Premissions have not been requested yet
        return Notification.requestPermission();
    }
    return Promise.reject();
}

function registerServiceWorker() {
    return navigator.serviceWorker.register('http://localhost:3000/service-worker.js')
            .then(function(serviceWorkerRegistration) {
                // check for existing subscriptions
                console.log("Service worker registered")
                serviceWorkerRegistration.pushManager.getSubscription()
                    .then(function(subscription) {
                        if (!subscription) {
                            // Try subscribing to push notifications if a subscription does not exist
                            console.log("pushNotificationSubscribe")
                            pushNotificationSubscribe(serviceWorkerRegistration);
                        } else {
                            console.log("Already subscribed to push notifications.")
                            if(!equalArrayBuffers(subscription.options.applicationServerKey, window.applicationServerKey.buffer) )
                            {
                                // If VAPID keys have changed since last subscription then re-subscribe
                                // TODO can this be done in the service worker?
                                console.log("But the VAPID keys have changed since previous subscription, so unsubscribing and subscribing again.");
                                pushNotificationUnsubscribe(subscription)
                                .then( () => pushNotificationSubscribe(serviceWorkerRegistration) )
                                .catch( () => pushNotificationSubscribe(serviceWorkerRegistration) );
                            } else {
                                window.PushSubscription = subscription;
                            }
                        }
                    })
                    .catch(function(err) {
                        pushNotificationSubscribe();
                    });
            }).catch(function(err){
                console.error("Error installing service worker", err);
            });
}

function handleServiceWorkerRegistration(serviceWorkerRegistration) {
    console.log("Service worker registered")
    serviceWorkerRegistration.pushManager.getSubscription()
        .then(function(subscription) {
            if (!subscription) {
                // Try subscribing to push notifications if a subscription does not exist
                console.log("pushNotificationSubscribe")
                pushNotificationSubscribe(serviceWorkerRegistration);
            } else {
                console.log("Already subscribed to push notifications.")
                if(!equalArrayBuffers(subscription.options.applicationServerKey, window.applicationServerKey.buffer) )
                {
                    // If VAPID keys have changed since last subscription then re-subscribe
                    // TODO can this be done in the service worker?
                    console.log("But the VAPID keys have changed since previous subscription, so unsubscribing and subscribing again.");
                    pushNotificationUnsubscribe(subscription)
                    .then( () => pushNotificationSubscribe(serviceWorkerRegistration) )
                    .catch( () => pushNotificationSubscribe(serviceWorkerRegistration) );
                } else {
                    window.PushSubscription = subscription;
                }
            }
        })
        .catch(function(err) {
            pushNotificationSubscribe();
        });
}    

function handlePushNotificationPermission(permission) {
    if (permission === "granted") {
        console.log("Push notifications enabled");
        registerServiceWorker().then
        serviceWorkerRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: window.applicationServerKey,
        })
        .then(function(subscription) {
            window.PushSubscription = subscription;
            console.log("Subscribed to push notifications.")
        })
        .catch(function(e) {
            console.error("Push notifications disabled on this browser.");
        });
    } else {
        console.log("Push notifications blocked. Please allow notifications from browser settings to use this option.");
    }
}

// function to unsubscribe from push notification
function pushNotificationUnsubscribe( pushSubscription ) {
    return new Promise((resolve, reject) => {
        pushSubscription.unsubscribe()
        .then(function(successful) {
            console.log("Unsubscribed from push notifications.");
            window.PushSubscription = undefined;
            resolve();
        })
        .catch(function(e) {
            console.error("Push notifications disabled on this browser.");
            reject();
        });
    });
};

// function to send a push notification
function sendPushNotification(text){
    $.ajax({ url: 'http://localhost:3000/send',
                type:'POST',
                data: { text: text },
                dataType: 'json',
                success: function(response){
                    console.log(response);
                },
                error: function(jqxhr) {
                    console.error(jqxhr);
                }
    });
}

function subscribePushNotification() {
    if (window.PushSubscription) {
        $.ajax({ url: 'http://localhost:3000/subscribe',
                 type:'POST',
                 data: {
                     endpoint: window.PushSubscription.endpoint,
                     auth: window.PushSubscription.toJSON().keys.auth,
                     p256dh: window.PushSubscription.toJSON().keys.p256dh,
                 },
                 dataType: 'json',
                 success: function(response){
                     console.log(response);
                 },
                 error: function(jqxhr) {
                     console.error(jqxhr);
                 }
        });
    } else {
        console.error("No push notification subscription found.");
    }
}


function equalArrayBuffers(b1, b2){
    if (b1.byteLength != b2.byteLength) return false;
    var a1 = new Uint8Array(b1);
    var a2 = new Uint8Array(b2);
    for (var i = 0 ; i < b1.byteLength ; i++)
    {
        if (a1[i] != a2[i]) return false;
    }
    return true;
}

function initializeServiceWorker() {

}

// function to set up push notifications
function pushNotificationInitialize() {
    if (!('serviceWorker' in navigator)) {
       console.error("Push notifications are not supported on this browser.");
    } else {
        if (!('showNotification' in ServiceWorkerRegistration.prototype)) {
            console.error("Push notifications are not supported on this browser.");
            return;
         }
         // The user denied the notification permission which
         // means we failed to subscribe and the user will need
         // to manually change the notification permission to
         // subscribe to push messages
         if (Notification.permission === "denied"  || Notification.permission === 'blocked') {
            console.error("Push notifications blocked. Please allow notifications from browser settings to use this option.");
            return;
         }
         // Push notifications supported by the browser
         if (!('PushManager' in window)) {
            console.error("Push notifications are not supported on this browser.");
            return;
         }

        // try installing the service worker
        navigator.serviceWorker.register('http://localhost:3000/service-worker.js').catch(function(err){
            console.error("Error installing service worker", err);
        });

        navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) {
            // check for existing subscriptions
            console.log("Service worker registered")
            serviceWorkerRegistration.pushManager.getSubscription()
                .then(function(subscription) {
                    if (!subscription) {
                        // Try subscribing to push notifications if a subscription does not exist
                        console.log("pushNotificationSubscribe")
                        pushNotificationSubscribe(serviceWorkerRegistration);
                    } else {
                        console.log("Already subscribed to push notifications.")
                        if(!equalArrayBuffers(subscription.options.applicationServerKey, window.applicationServerKey.buffer) )
                        {
                            // If VAPID keys have changed since last subscription then re-subscribe
                            console.log("But the VAPID keys have changed since previous subscription, so unsubscribing and subscribing again.");
                            pushNotificationUnsubscribe(subscription)
                            .then( () => pushNotificationSubscribe(serviceWorkerRegistration) )
                            .catch( () => pushNotificationSubscribe(serviceWorkerRegistration) );
                        } else {
                            window.PushSubscription = subscription;
                        }
                    }
                })
                .catch(function(err) {
                    pushNotificationSubscribe();
                });
        });
    }
};

// Go through the steps of requesting permission, subscribing to push notifications
function newPushNotificationInitialize () {
    // Check for notifications support
    if (!('Notification' in window)) {
        console.error("Push notifications are not supported on this browser.");
        return;
    }
    // Check for service worker support
    if (!('serviceWorker' in navigator)) {
        console.error("Service workers are not supported on this browser.");
        return;
    }
    // Get the state of the current permissions or request them if they have not been requested before
    requestPushNotificationPermission()
        .then(handlePushNotificationPermission);
}

pushNotificationInitialize();




// in production use sync this final subscription stored in window.pushSubscription
// with the database to send notifications to the user
// and privately save the VAPID keys and use them for all push notifications
// If VAPID keys are lost or re-generated, all push notifications will require re-subscriptions
